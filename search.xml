<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[学习这条路永远不止你一人在奋斗]]></title>
      <url>/2018/05/20/%E5%AD%A6%E4%B9%A0%E8%BF%99%E6%9D%A1%E8%B7%AF%E6%B0%B8%E8%BF%9C%E4%B8%8D%E6%AD%A2%E4%BD%A0%E4%B8%80%E4%BA%BA%E5%9C%A8%E5%A5%8B%E6%96%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>当你感觉到疲惫时，想一想十一点的阿里，想一想凌晨的腾讯，想一想通宵的华为。想一想你颓废的过去，想一想你的未来。小伙子，加油吧。</p>
</blockquote>
<hr>
<p><img src="/images/ali.jpg" alt="&quot;勿忘初心&quot;"> </p>
<blockquote>
<p>个人信仰：分享、互助、开源。</p>
<h2 id="PHP的快车道"><a href="#PHP的快车道" class="headerlink" title="PHP的快车道"></a>PHP的快车道</h2><ul>
<li><a href="http://rango.swoole.com/archives/category/php" target="_blank" rel="external">韩天峰</a></li>
<li><a href="http://www.laruence.com/" target="_blank" rel="external">风雪之隅</a></li>
<li><a href="http://www.justwinit.cn/category/32/" target="_blank" rel="external">向东</a></li>
<li><a href="http://www.hishenyi.com/archives/category/myphp" target="_blank" rel="external">沈逸</a></li>
<li><a href="http://zyan.cc/nginx_php_v6/" target="_blank" rel="external"> Nginx 0.8.x + PHP 5.2.13（FastCGI）搭建胜过Apache十倍的Web服务器</a></li>
</ul>
<hr>
<h2 id="Mysql的快车道"><a href="#Mysql的快车道" class="headerlink" title="Mysql的快车道"></a>Mysql的快车道</h2><ul>
<li><a href="https://segmentfault.com/a/1190000007816192" target="_blank" rel="external">单机数据库优化的一些实践</a></li>
<li><a href="https://www.zhihu.com/question/19719997" target="_blank" rel="external">MySQL 对于千万级的大表要怎么优化？</a></li>
</ul>
<hr>
<p>持续更新中…</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> study </category>
            
        </categories>
        
        
        <tags>
            
            <tag> study </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown实用的语法]]></title>
      <url>/2017/05/12/Markdown%E5%AE%9E%E7%94%A8%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h3><p>短代码区 `&lt;?php echo hello world。?&gt;<br>长代码区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    //世界是如此的美丽，你好世界</div><div class="line">    echo helloworld;</div><div class="line">?&gt;</div><div class="line">``` </div><div class="line">### 1.1 php代码区</div><div class="line">```php</div><div class="line">&lt;?php</div><div class="line">	</div><div class="line">	// 求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数</div><div class="line">	echo  (mktime(0,0,0,3,6,2007) -  mktime(0,0,0,2,5,2007) )/(24*3600) ,&apos;&lt;br /&gt;&apos;; //29</div><div class="line">	echo ( strtotime(&apos;3/6/2007&apos;) - strtotime(&apos;2/5/2007&apos;) ) /(24*3600); //29</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>右边是一个链接，格式为<code>[备注](连接)</code>：<a href="//www.baidu.com">这是一个链接</a>。<br>[你好世界][1]&lt;–左边字体变色，格式为：<code>[文字][1|2|3]</code>。<br>下边是一个图片，格式为<code>![备注](链接地址)</code>：<br><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="你好世界"></p>
<h3 id="2-图标"><a href="#2-图标" class="headerlink" title="2.图标"></a>2.图标</h3><p><i class="icon-share"></i>转发，格式为：<br><i class="icon-file"></i>新建<br><i class="icon-trash"></i>删除<br><i class="icon-cloud"></i>云<br><i class="icon-reorder"></i>列表<br><i class="icon-pencil"></i>铅笔<br><i class="icon-fullscreen"></i>全屏<br><i class="icon-list"></i>列表<br><i class="icon-desktop"></i>电脑</p>
<ul>
<li>[ ] 空白框</li>
<li>[x] 对勾</li>
</ul>
<table>
<thead>
<tr>
<th>表格</th>
<th style="text-align:right">表格</th>
<th style="text-align:center">表格</th>
<th style="text-align:right">表格</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认左</td>
<td style="text-align:right">靠右</td>
<td style="text-align:center">中间</td>
<td style="text-align:right">右边</td>
</tr>
</tbody>
</table>
<h3 id="hexo插入图片"><a href="#hexo插入图片" class="headerlink" title="hexo插入图片"></a>hexo插入图片</h3><ul>
<li>插入外部链接图片<br>  <img src="“图片地址”" alt="“图片描述”">  </li>
<li>添加本地图片(在\hexo\source目录下新建images文件夹)<br>  <img src="/images/你的图片名字.JPG" alt="“图片描述”">  </li>
<li><p>插入音乐(网易云音乐，找到喜欢的歌曲，点击分享按钮，把里面的代码复制下来，直接粘贴到博文中即可)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86   </div><div class="line">    src=&quot;http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66&quot;&gt;  </div><div class="line">&lt;/iframe&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>插入视频</p>
<pre><code>Idina Menze和Caleb Hyles激情对唱Let It Go：  
&lt;iframe   
  height=498 width=510   
  src=&quot;http://player.youku.com/embed/XNjcyMDU4Njg0&quot;   
  frameborder=0 allowfullscreen&gt;  
&lt;/iframe&gt;
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markDown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之工厂模式]]></title>
      <url>/2017/05/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><p>工厂模式通俗来说是指，为一些有着相同结构的类创建一个类族，并且为这个族群提供唯一一个入口类。</p>
<hr>
<h2 id="工厂模式的含义？"><a href="#工厂模式的含义？" class="headerlink" title="工厂模式的含义？"></a>工厂模式的含义？</h2><p>工厂模式的含义就是：设计一个类（此时这个类可以叫作“工厂类”），该类的作用就是帮助其他的类“生产”对象，也就是说，只要传递给这个“工厂”一个类名，就可以得到一个相应的对象！</p>
<hr>
<h2 id="工厂模式实例01"><a href="#工厂模式实例01" class="headerlink" title="工厂模式实例01"></a>工厂模式实例01</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Factory&#123;</div><div class="line">	public static function getInstance($class_name)&#123;</div><div class="line">		if (file_exists(&apos;./&apos;.$class_name.&apos;.class.php&apos;)) &#123;</div><div class="line">			include &apos;.&apos;.$class_name.&apos;.class.php&apos;;</div><div class="line">			return new $class_name;	//可变对象</div><div class="line">		&#125;else&#123;</div><div class="line">			die(&quot;系统错误，没有找到相关的类！&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//利用工厂类得到对象</div><div class="line">$obj = Factory::getInstance(&apos;variableObj&apos;);</div></pre></td></tr></table></figure>
<h2 id="工厂模式实例02"><a href="#工厂模式实例02" class="headerlink" title="工厂模式实例02"></a>工厂模式实例02</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//利用工厂方法，生成单例对象</div><div class="line">class ObjectFactory&#123;</div><div class="line">	//这里的单例，实现的方式不是“三私一共”</div><div class="line">	private static $instance;</div><div class="line">	public static function getInstance($class_name)&#123;</div><div class="line">		if (file_exists(&apos;./&apos;.$class_name.&apos;.class.php&apos;)) &#123;</div><div class="line">			include_once &apos;./&apos;.$class_name.&apos;.class.php&apos;;</div><div class="line">			if (!self::$instance instanceof $class_name) &#123;</div><div class="line">				self::$instance = new $class_name;</div><div class="line">			&#125;</div><div class="line">			return self::instance;</div><div class="line">		&#125;else&#123;</div><div class="line">			die(&quot;系统错误，没有找到相关的类！&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$obj = ObjectFactory::getInstance(&apos;obj&apos;);</div></pre></td></tr></table></figure>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://blog.csdn.net/phenixsoul/article/details/8492696" target="_blank" rel="external">寻源之理</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之单例模式]]></title>
      <url>/2017/05/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h2><p>单例模式是一种常见的设计模式，单例就是单一的实例，在实际的应用中，我们发现，存在一些类只需要实例化出来一个对象，就是可以完成所有的操作和功能。计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。</p>
<h2 id="单例模式的特点？"><a href="#单例模式的特点？" class="headerlink" title="单例模式的特点？"></a>单例模式的特点？</h2><ul>
<li>只能有一个实例；</li>
<li>必须自行创建这个实例；</li>
<li>必须给其他对象提供这一实例；<h2 id="单例模式的好处？"><a href="#单例模式的好处？" class="headerlink" title="单例模式的好处？"></a>单例模式的好处？</h2></li>
<li>改进系统的设计；</li>
<li>对全局变量是一种改建；</li>
<li>使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。<h2 id="单例实例"><a href="#单例实例" class="headerlink" title="单例实例"></a>单例实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//典型的做法：三私一公</div><div class="line">class DB&#123;</div><div class="line">	//私有化静态变量保存全局实例</div><div class="line">	private static $instance=null;</div><div class="line">	//私有化构造方法，防止外界实例化对象</div><div class="line">	private function __construct()&#123;&#125;</div><div class="line">	//公有化静态方法，单例访问入口</div><div class="line">	public static function getInstance()&#123;</div><div class="line">		//判断当前对象是否已经存在</div><div class="line">		if (!self::$instance instanceof self) &#123;</div><div class="line">			self::$instance=new self();</div><div class="line">		&#125;</div><div class="line">		return $instance;</div><div class="line">	&#125;</div><div class="line">	//私有化clone函数，防止外部克隆对象</div><div class="line">	private function __clone()&#123;&#125;</div><div class="line">&#125;</div><div class="line">//实例化对象</div><div class="line">$db1 = DB::getInstance();</div><div class="line">$db2 = DB::getInstance();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://www.cnblogs.com/yangjinjin/archive/2013/01/31/2887492.html" target="_blank" rel="external">最美的痕迹</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>/2017/04/28/http%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h2><p>HTTP 是基于 TCP/IP 协议的应用层协议。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p>
<h2 id="HTTP的缺点？"><a href="#HTTP的缺点？" class="headerlink" title="HTTP的缺点？"></a>HTTP的缺点？</h2><p>缺点：</p>
<ul>
<li>每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</li>
<li>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">五大类：</div><div class="line"><span class="number">100</span><span class="number">-199</span> 用于指定客户端应相应的某些动作。 </div><div class="line"><span class="number">200</span><span class="number">-299</span> 用于表示请求成功。 </div><div class="line"><span class="number">300</span><span class="number">-399</span> 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。 </div><div class="line"><span class="number">400</span><span class="number">-499</span> 用于指出客户端的错误。 </div><div class="line"><span class="number">500</span><span class="number">-599</span> 用于支持服务器错误。</div><div class="line">常见状态码：</div><div class="line"><span class="number">200</span>（成功）：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页</div><div class="line"><span class="number">201</span>（已创建）：请求成功并且服务器创建了新的资源</div><div class="line"><span class="number">202</span>（已接受）：服务器已接受请求，但尚未处理</div><div class="line"><span class="number">203</span>（非授权信息）：服务器已成功处理了请求，但返回的信息可能来自另一来源</div><div class="line"><span class="number">204</span>（无内容）：服务器成功处理了请求，但没有返回任何内容</div><div class="line"><span class="number">205</span>（重置内容）：服务器成功处理了请求，但没有返回任何内容</div><div class="line"><span class="number">206</span> （部分内容）：服务器成功处理了部分GET 请求</div><div class="line"><span class="number">404</span>（未找到）：服务器找不到请求的网页</div><div class="line"><span class="number">500</span>（服务器内部错误）：服务器遇到错误，无法完成请求</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#友情链接</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">阮一峰的网络日志</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP常用字符串函数]]></title>
      <url>/2016/05/09/PHP%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>字符串输出<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span>()：输出一个或多个字符串</div><div class="line"><span class="keyword">print</span>()：输出一个字符串</div><div class="line">printf()：输出格式化字符串</div></pre></td></tr></table></figure></p>
<p>字符串去除<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">trim()：去除字符串 首尾 空白等特殊符号或指定字符序列</div><div class="line">ltrim()：去除字符串 首 空白等特殊符号或指定字符序列</div><div class="line">rtrim()：去除字符串 尾 空白等特殊符号或指定字符序列</div><div class="line">chop()：同 rtrim()</div></pre></td></tr></table></figure></p>
<p>字符串连接<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">implode()：使用字符将数组的内容组合成一个字符串</div><div class="line">join()：同 implode()</div></pre></td></tr></table></figure></p>
<p>字符串分割<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explode()：使用一个字符串分割另一个字符串，将字符串分割到数组中</div></pre></td></tr></table></figure></p>
<p>字符串获取<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    substr()：从字符串中获取其中的一部分</div><div class="line">    strstr()：查找字符串在另一个字符串中第一次出现的位置，并返回从该位置到字符串结尾的所有字符</div><div class="line">    subchr()：同 strstr()</div><div class="line">    strrchr()：查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符</div><div class="line">``` </div><div class="line">字符串替换</div><div class="line">```php</div><div class="line">    substr_replace()：把字符串的一部分替换为另一个字符串</div><div class="line">    str_replace()：使用一个字符串替换字符串中的另一些字符</div></pre></td></tr></table></figure></p>
<p>字符串计算<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    strlen()：取得字符串的长度</div><div class="line">    strpos()：定位字符串第一次出现的位置</div><div class="line">    strrpos()：定位字符串最后一次出现的位置</div><div class="line">``` </div><div class="line">字符串 XHTML 格式化显示</div><div class="line">```php</div><div class="line">    nl2br()：将换行符 n 转换成 XHTML 换行符</div><div class="line">    htmlspecialchars()：把一些特殊字符转换为 HTML 实体</div><div class="line">    htmlspecialchars_decode()：把一些 HTML 实体转换为特殊字符，htmlspecialchars() 的反函数</div></pre></td></tr></table></figure></p>
<p>字符串存储（转义）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">addslashes()：对特殊字符加上转义字符。</div><div class="line">stripslashes()：addslashes() 的反函数。</div></pre></td></tr></table></figure></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://www.blogdaren.com/" target="_blank" rel="external">博客达人</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2015/05/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
