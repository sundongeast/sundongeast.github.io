<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[学习这条路永远不止你一人在奋斗]]></title>
      <url>/2018/05/20/%E5%AD%A6%E4%B9%A0%E8%BF%99%E6%9D%A1%E8%B7%AF%E6%B0%B8%E8%BF%9C%E4%B8%8D%E6%AD%A2%E4%BD%A0%E4%B8%80%E4%BA%BA%E5%9C%A8%E5%A5%8B%E6%96%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>当你感觉到疲惫时，想一想十一点的阿里，想一想凌晨的腾讯，想一想通宵的华为。想一想你颓废的过去，想一想你的未来。小伙子，加油吧。</p>
</blockquote>
<hr>
<p><img src="/images/ali.jpg" alt="&quot;勿忘初心&quot;"> </p>
<blockquote>
<p>个人信仰：分享、互助、开源。</p>
<h2 id="PHP的快车道"><a href="#PHP的快车道" class="headerlink" title="PHP的快车道"></a>PHP的快车道</h2><ul>
<li><a href="http://rango.swoole.com/archives/category/php" target="_blank" rel="external">韩天峰</a></li>
<li><a href="http://www.laruence.com/" target="_blank" rel="external">风雪之隅</a></li>
<li><a href="http://www.justwinit.cn/category/32/" target="_blank" rel="external">向东</a></li>
<li><a href="http://www.hishenyi.com/archives/category/myphp" target="_blank" rel="external">沈逸</a></li>
<li><a href="http://zyan.cc/nginx_php_v6/" target="_blank" rel="external"> Nginx 0.8.x + PHP 5.2.13（FastCGI）搭建胜过Apache十倍的Web服务器</a></li>
</ul>
<hr>
<h2 id="Mysql的快车道"><a href="#Mysql的快车道" class="headerlink" title="Mysql的快车道"></a>Mysql的快车道</h2><ul>
<li><a href="https://segmentfault.com/a/1190000007816192" target="_blank" rel="external">单机数据库优化的一些实践</a></li>
<li><a href="https://www.zhihu.com/question/19719997" target="_blank" rel="external">MySQL 对于千万级的大表要怎么优化？</a></li>
</ul>
<hr>
<p>有生之年，希望有人问我这个问题：“先生，有人问我喜欢的人是谁，我说我喜欢的人是天上的太阳。你知道太阳的英文么”。</p>
<hr>
<p>持续更新中…</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> study </category>
            
        </categories>
        
        
        <tags>
            
            <tag> study </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[composerr的常规操作]]></title>
      <url>/2017/05/19/composerr%E7%9A%84%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[关于代码注释规范]]></title>
      <url>/2017/05/18/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>工作中经常遇到不写注释的程序员，让我们难以理解代码的含义。代码的注释可以让我们更快地熟悉代码的结构，以及更好的优化代码。好的注释让人耳目一新，敲起代码也是键盘不离手。那么如何写好注释呢，我在网上查看了一些攻略，这就分享给大家。</p>
</blockquote>
<h2 id="编程注释规范"><a href="#编程注释规范" class="headerlink" title="编程注释规范"></a>编程注释规范</h2><p>黄金定律——不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><p>编码规范中有一条很重要—见名知意，有时候直白的函数名还不能表达完整的意思，这个时候注释就出场了，代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。</p>
<p>在写代码前就应该添加注释，这时在你的脑子里的是清晰完整的思路。<br>如果在代码最后再添加注释，它将花费你双倍的时间。</p>
<h2 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法"></a>注释的写法</h2><ol>
<li><p>html</p>
<!-- 注释的内容 -->
</li>
<li><p>css</p>
<p>/<em> declarations </em>/</p>
</li>
<li><p>javascript</p>
<p> // 注释内容<br>/<em> 注释内容 </em>/</p>
</li>
</ol>
<h3 id="单行注释格式"><a href="#单行注释格式" class="headerlink" title="单行注释格式"></a>单行注释格式</h3><blockquote>
<p>双斜线后，必须跟注释内容保留一个空格。<br>可独占一行，前边不许有空行，缩进与下一行代码保持一致。<br>可位于一个代码行的末尾，注意这里的格式。<br>双斜线距离分号四个空格。</p>
</blockquote>
<h3 id="多行注释格式"><a href="#多行注释格式" class="headerlink" title="多行注释格式"></a>多行注释格式</h3><blockquote>
<p>最少三行（前边留空一行,下面情景使用）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- 难以理解的代码段</div><div class="line">- 可能存在错误的代码段</div><div class="line">- 浏览器特殊的HACK代码</div><div class="line">- 想吐槽的产品逻辑，合作同事</div><div class="line">- 业务逻辑强的相关代码</div></pre></td></tr></table></figure>
<ol>
<li>文件信息头注释<br>/**</li>
</ol>
<ul>
<li>@version $Id: HTML.php,v 1.5 2016/01/23 03:21:16 kochp Exp $</li>
<li>@package index</li>
<li>@copyright (C) 2016 - 2017 Miro International Pty Ltd</li>
<li>@license <a href="http://www.sun.org/copyleft/index.html" target="_blank" rel="external">http://www.sun.org/copyleft/index.html</a> GNU/GPL</li>
<li>*/</li>
</ul>
<p>备注说明：</p>
<ol>
<li>第一行以 ‘/<em>*’ 开头，最后一行以 ‘</em>/’结束。中间每行以 ‘* ‘开始。</li>
<li><p>注释关键字以 ‘@’ 为关键字，具体关键含义如下：[详见关键字见附录]</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	附录：注释关键字含义列表：</div><div class="line">	@version 版本信息；</div><div class="line">	@package 封装包名称，或所属包名称；</div><div class="line">	@copyright 版权信息；</div><div class="line">	@license 许可证协议信息；</div><div class="line">	@param 参数定义；</div><div class="line">	@author 作者；</div><div class="line">	@example 实例；</div><div class="line">	@<span class="keyword">abstract</span> 摘要，梗概；</div><div class="line">	@access 使用权限或前置条件；</div><div class="line">	@deprecated 声明事项；</div><div class="line">	@<span class="keyword">exception</span> 特例，特殊情况；</div><div class="line">	@<span class="keyword">final</span> 最后，最终；</div><div class="line">	@<span class="keyword">global</span> 总体的，全局</div><div class="line">	@subpackage 替代包</div><div class="line">	@name 文件名</div><div class="line">各类标签可以参考[http:<span class="comment">//usejsdoc.org/](http://usejsdoc.org/)</span></div></pre></td></tr></table></figure>
</li>
<li><p>注释内容与星标前保留一个空格。</p>
</li>
<li>多人合作注释（同一个文件的代码可能被多个人修改，这个时候需要标识出谁改动了哪些部分。格式： <code>// add begin by 作者名</code> ,一个分号<code>;</code>，再加上原因 <code>Reason</code>,代码添加的最后加上：<code>//add end</code>）;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Example</div><div class="line"></div><div class="line">// add begin by sundong ; Init post&apos;s id </div><div class="line">var postId = 1;</div><div class="line">//end add</div><div class="line">或者</div><div class="line">// add begin by sundong </div><div class="line">/**</div><div class="line"> * 多行注释说明原因</div><div class="line"> */</div><div class="line">var postId = 1;</div><div class="line">//end add</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>祝你生活愉快，未完待续…</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> annotation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库优化]]></title>
      <url>/2017/05/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="百万级数据如何进行优化"><a href="#百万级数据如何进行优化" class="headerlink" title="百万级数据如何进行优化"></a>百万级数据如何进行优化</h2><blockquote>
<p>感谢每一位在共享道路越走越远的好人。</p>
</blockquote>
<p> 1、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。<br> 2、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。<br> 3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：     select id from t where num is null     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：     select id from t where num=0<br> 4、尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>     select id from t where num=10 or num=20<br>     可以这样查询：<br>     select id from t where num=10<br>     union all<br>     select id from t where num=20<br> 5、下面的查询也将导致全表扫描：(不能前置百分号)<br>     select id from t where name like ‘�c%’<br>    若要提高效率，可以考虑全文检索。<br> 6、in 和 not in 也要慎用，否则会导致全表扫描，如：<br>     select id from t where num in(1,2,3)<br>     对于连续的数值，能用 between 就不要用 in 了：<br>     select id from t where num between 1 and 3<br> 7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>     select id from t where num=@num<br>     可以改为强制查询使用索引：<br>     select id from t with(index(索引名)) where num=@num<br> 8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>     select id from t where num/2=100<br>     应改为:<br>     select id from t where num=100<em>2<br> 9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>     select id from t where substring(name,1,3)=’abc’–name以abc开头的id<br>     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id<br>     应改为:<br>     select id from t where name like ‘abc%’<br>     select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′<br> 10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。<br> 11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。<br> 12、不要写一些没有意义的查询，如需要生成一个空表结构：<br>     select col1,col2 into #t from t where 1=0<br>     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>     create table #t(…)<br> 13、很多时候用 exists 代替 in 是一个好的选择：<br>     select num from a where num in(select num from b)<br>     用下面的语句替换：<br>     select num from a where exists(select 1 from b where num=a.num)<br> 14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。<br> 15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。<br> 16.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。<br> 17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。<br> 18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。<br> 19、任何地方都不要使用 select </em> from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。<br> 20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。<br> 21、避免频繁创建和删除临时表，以减少系统表资源的消耗。<br> 22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。<br> 23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。<br> 24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。<br> 25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。<br> 26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。<br> 27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。<br> 28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。<br> 29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。<br> 30、尽量避免大事务操作，提高系统并发能力。</p>
<blockquote>
<p>待续…</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据表操作]]></title>
      <url>/2017/05/16/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="MySQL数据表操作"><a href="#MySQL数据表操作" class="headerlink" title="MySQL数据表操作"></a>MySQL数据表操作</h1><h2 id="数据的写操作"><a href="#数据的写操作" class="headerlink" title="数据的写操作"></a>数据的写操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">insert into tb_name set 字段1=值1，字段2=值2，…..;</div><div class="line">插入操作：</div><div class="line">	insert into 表名 value(数据);</div><div class="line">	insert into tb_name set 字段1=值1，字段2=值2，…..;</div><div class="line">	insert into tb_name [字段列表] values(记录1)，（记录2）….；</div><div class="line">注意：</div><div class="line">	字段列表（不省略）：单个或者多个字段，字段的顺序不需要与数据表一致。</div><div class="line">	字段列表省略时，数据按照数据表的字段顺序进行填充。</div><div class="line">	数值要与字段列表中的字段一一对应。</div><div class="line">蠕虫复制:insert into tb_name (字段列表) select 字段列表 from 表名；</div><div class="line"></div><div class="line">update tb_name set 字段1=值1，字段2=值2,…[where 条件]；</div><div class="line">更新操作：</div><div class="line">	update tb_name set 字段1=值1，字段2=值2,…[where 条件]；</div><div class="line">注意:</div><div class="line">通常必须使用where条件来筛选所更新的记录。</div><div class="line">不添加where条件会导致整个数据表的对应字段数据被修改。</div><div class="line">where条件通常不可省略。如果省略，则更新整个数据表记录。</div><div class="line"></div><div class="line">删除操作：</div><div class="line">	delete from tb_name [where条件];</div><div class="line">delete from tb_name [where条件];</div><div class="line"></div><div class="line">	通常条件下，where子句不可以省略，省略时，删除整张数据表的数据。</div><div class="line">	对于有自增长属性的字段，删除整张表记录后，自增长的起始值不置1</div><div class="line"></div><div class="line">清空truncate操作：</div><div class="line">	truncate 表名；</div><div class="line">truncate 表名；</div><div class="line">	delete不加where条件，删除整个表的数据，auto_increment字段的值不清除（继续累加）。delete逐行删除。效率低。删除数据，不删除数据表结构。</div><div class="line">	truncate不能加where条件。自增长字段，值清除，从1开始。（销毁原来的数据表，并创建数据表）。一次性删除。删除数据，不删除结构。</div><div class="line">	drop删除数据库，数据表，字段。删除数据及结构。</div><div class="line">注意：</div><div class="line">	清空数据表的记录。</div><div class="line"></div><div class="line">delete/drop/trun比较：</div><div class="line">	delete不加where条件，删除整个表的数据，auto_increment字段的值不清除（继续累加）。delete逐行删除。效率低。删除数据，不删除数据表结构。</div><div class="line"></div><div class="line">	truncate不能加where条件。自增长字段，值清除，从1开始。（销毁原来的数据表，并创建数据表）。一次性删除。删除数据，不删除结构。</div><div class="line"></div><div class="line">	drop删除数据库，数据表，字段。删除数据及结构。</div></pre></td></tr></table></figure>
<h2 id="数据的读操作"><a href="#数据的读操作" class="headerlink" title="数据的读操作"></a>数据的读操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">select 字段列表 from 表名 [where子句] [group by子句] [having子句] [order by子句] [limit 子句];</div><div class="line"></div><div class="line">mysql_affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数,INSERT，UPDATE 或 DELETE 查询所影响的记录行数。</div><div class="line"></div><div class="line">返回值</div><div class="line">limit子句:限制输出的记录数</div><div class="line">	select 字段列表 from 表名 [where子句] [group by子句] [having子句] [order by子句] [limit 子句];</div><div class="line">	limit子句:限制输出的记录数</div><div class="line">		select 字段列表 from 表名 [where子句] [group by子句] [having子句] [order by子句] [limit 子句];</div><div class="line">		分页公式:offset=(page-1)*pagesize</div><div class="line"></div><div class="line">where条件查询：</div><div class="line">	select 字段列表 from tb_name [where子句]；</div><div class="line">	where 字段 in：in后面罗列字段可取的值，使用（）包括。</div><div class="line">	where…between val1 and val2</div><div class="line">	where 字段 is null：null不能使用一般的比较运算符比较。null不等于任何值，包括本省</div><div class="line">注意：</div><div class="line">where本质：</div><div class="line">where从句的字段必须来自数据表</div><div class="line"></div><div class="line">select语法高级:</div><div class="line">	select 字段列表 from 表名 [where子句] [group by子句] [having子句] [order by子句] [limit 子句];</div><div class="line">mysqli_affected_rows() 函数返回前一次 MySQL 操作（SELECT、INSERT、UPDATE、REPLACE、DELETE）所影响的记录行数。</div><div class="line"></div><div class="line">order by子句:</div><div class="line">	select 字段列表 from 表名 [where 子句] [group by 子句] [having子句] [order by子句];</div><div class="line">注意：</div><div class="line">	asc(ascend)升序，默认的排序规则</div><div class="line">	desc(descend)降序</div><div class="line">	同时使用多个字段进行排序（如果第一个字段值相等，使用第二个字段值进行排序）</div><div class="line">多个字段同时排序时，需要逐一指定排序规则，否则使用默认排序规则：</div><div class="line">	多个字段时，通常指定各个字段的排序规则</div><div class="line">默认排序规则为升序（asc）:</div><div class="line"></div><div class="line">having子句:</div><div class="line">	select 字段列表from 表名 [where子句] [group by子句] [having子句];</div><div class="line">注意：</div><div class="line">一般聚合函数和字段别名使用having进行查询。</div><div class="line">对分组结果集进行筛选，通常跟在group by后面</div><div class="line">	having相当于where</div><div class="line">	having后面可以是聚合函数	;</div><div class="line">	where后面只能跟数据表字段：</div><div class="line"></div><div class="line">聚合函数</div><div class="line">	•	avg()，返回指定组中的平均值。</div><div class="line">	•	count()，返回指定组中项目的数量；</div><div class="line">	•	max()，返回指定组中数据最大值；</div><div class="line">	•	min()，返回指定组中数据最小值；</div><div class="line">	•	sum()，返回指定组中数据的和</div><div class="line"></div><div class="line">	group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator &apos;分隔符&apos;]) </div><div class="line">	inet_aton(&apos;IP地址&apos;):把IP地址装换成整型</div><div class="line">	inet_ntoa(&apos;整数&apos;):整数转回ip</div><div class="line">	mysqli_affected_rows() 函数返回前一次 MySQL 操作（SELECT、INSERT、UPDATE、REPLACE、DELETE）所影响的记录行数。</div><div class="line">	mysql_affected_rows() 函数返回前一次 MySQL 操作所影响的记录行数,INSERT，UPDATE 或 DELETE 查询所影响的记录行数。</div><div class="line"></div><div class="line">返回值</div><div class="line">inet_aton(&apos;IP地址&apos;):把IP地址装换成整型</div><div class="line">inet_ntoa(&apos;整数&apos;):整数转回ip</div><div class="line">group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator &apos;分隔符&apos;]) </div><div class="line"></div><div class="line">•	sum()，返回指定组中数据的和</div><div class="line">•	min()，返回指定组中数据最小值；</div><div class="line">•	max()，返回指定组中数据最大值；</div><div class="line">•	count()，返回指定组中项目的数量；</div><div class="line">•	avg()，返回指定组中的平均值。</div><div class="line"></div><div class="line">分组group by 子句</div><div class="line">	select count(字段) from tb_name 通常自动忽略空值</div><div class="line">	select 字段列表 from 表名 [where子句] [group by 子句]；</div><div class="line">	适用于没有having的条件情况</div><div class="line">select count(distinct(column)) from table #可以用到索引</div><div class="line">	子查询</div><div class="line">select count(*) from (select dealer_id  from card GROUP BY dealer_id)as tmp;</div><div class="line"></div><div class="line">模糊查询：使用匹配符‘%’，‘_’</div><div class="line">	%:匹配任意多个字符</div><div class="line">	_:匹配一个字符</div><div class="line">from子句：</div><div class="line">	跟单表</div><div class="line">	多张表（笛卡儿积，无连接条件）</div><div class="line"></div><div class="line">where子句：where 子句对from子句返回的信息进行筛选，满足条件的作为结果集返回。</div><div class="line">基本语法：</div><div class="line">	select 字段列表 from tb_name；</div><div class="line">	as  字段别名：在结果集使用别名</div><div class="line">	字段列表选项all/distinct：</div><div class="line">			all:不去除结果集中的重复行。</div><div class="line">			distinct可以去除结果集中的重复行</div><div class="line">	from子句：</div><div class="line">		跟单表</div><div class="line">		多张表（笛卡儿积，无连接条件）</div><div class="line"></div><div class="line">where子句：where 子句对from子句返回的信息进行筛选，满足条件的作为结果集返回。</div><div class="line">字段列表选项all/distinct：</div><div class="line">		all:不去除结果集中的重复行。</div><div class="line">		distinct可以去除结果集中的重复行</div><div class="line">as  字段别名：在结果集使用别名</div><div class="line">select 字段列表 from tb_name；</div><div class="line">注意：</div><div class="line">字段列表中可以有数据表中本身字段组合而成的字段：</div><div class="line">	字段列表可以是一个字段，可以是多个，可以使用*代替全部字段。</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库基本操作]]></title>
      <url>/2017/05/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>##MySQL数据库基本操作</p>
<blockquote>
<p>书到用时方恨少。</p>
<p>MySQL数据库启动和关闭</p>
<ol>
<li>按下win+r，在输入框输入services.msc，点击确定就可以打开服务窗口。</li>
<li>cmd命令行:以管理员的身份运行，net start|stop mysql</li>
</ol>
<p>数据库的登陆和退出</p>
<ol>
<li>登录数据库: mysql[.exe] [-h主机名] [-P端口号] -u用户名    -p密码。</li>
<li>退出数据库：exit、quit、\q    : 必须是反斜杠。</li>
</ol>
<p>查看所有的数据库</p>
<ol>
<li>show databases</li>
<li>初始状态下有四个数据库。</li>
<li>information_shema: 存放数据库相关信息，表格相关信息以及字符集编码和校对集。</li>
<li>mysql:    存放的是用户的相关信息，用户名和密码以及用户的权限。</li>
<li>performance_shema:        数据库的性能参数。</li>
<li>test:专门供用户测试练习使用的数据库。</li>
</ol>
<p>查看某条数据创建语句</p>
<ol>
<li>show create database 数据库名称</li>
</ol>
<p>创建数据库</p>
<ol>
<li>create database [if not exists] 数据库名称 [charset 字符集编码]</li>
</ol>
<p>选择数据库</p>
<ol>
<li>use 数据库名称</li>
</ol>
<p>删除数据库</p>
<ol>
<li>drop database [if exists] 数据库名称</li>
</ol>
<p>修改数据库：alter database </p>
<p>数据库名称 charset = 字符集编码</p>
<p>显示所有的字符集编码：</p>
<ol>
<li>cmd    ：   show character set </li>
</ol>
<p>查看数据库各个结构的字符集编码：</p>
<ol>
<li>show variables like ‘character<em>set</em>%’;</li>
</ol>
<p>创建数据库时修改</p>
<ol>
<li>create database 数据库名称 charset=字符集  collate=校验集<br>创建表格时修改</li>
<li>create table 表名()charset=字符集 collate=校验集<br>创建和修改数据库，表格和字段的字符集编码以及校验集<br>创建数据库时修改</li>
<li>create database 数据库名称 charset=字符集  collate=校验集<br>创建表格时修改</li>
<li>create table 表名()charset=字符集 collate=校验集<br>创建字段时修改</li>
<li>create table 表名( 字段名 字段数据类型 字段属性 charset 字符集 collate 校验集);<br>设置字段时，校验集和字符集不能加上=，用空格区分。</li>
</ol>
<p>创建字段时修改</p>
<ol>
<li>create table 表名( 字段名 字段数据类型 字段属性 charset 字符集 collate 校验集);<br>设置字段时，校验集和字符集不能加上=，用空格区分。</li>
</ol>
<p>数据库的原子操作CRUD</p>
<ol>
<li>增删改查介绍</li>
<li>C:Create（ insert ），写入</li>
<li>U:Update，更新</li>
<li>R:Read(select)：查询</li>
<li>D:Delete（drop）</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPStorm常用插件及快捷键]]></title>
      <url>/2017/05/15/PHPStorm%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>有时候不逼自己一把，你都不知道什么叫做绝望。</strong></p>
<p>PHPStorm自己封装的功能已经很强大了，插件可有可无，当然有一些插件安装之后可以更高提升工作效率，何乐而不为呢。</p>
</blockquote>
<h2 id="提高效率的插件"><a href="#提高效率的插件" class="headerlink" title="提高效率的插件"></a>提高效率的插件</h2><blockquote>
<p>安装步骤：打开phpstorm，依次点击 File-&gt;Settings…-&gt;Plugins，此时会看到这样的一个界面 点击图中红框标注的按钮(Browse repositories)，再弹出的窗口上方搜索位置。</p>
</blockquote>
<ol>
<li>CodeGlance  代码地图插件。</li>
<li>Power Mode II 写代码不要太带感。</li>
<li>Material Theme UI  好好爱护自己的眼睛。</li>
<li>ThinkStorm    是PHPStorm的ThinkPHP插件。</li>
<li>Emmet 部分特性支持不会是很好，开发前端神器。</li>
</ol>
<h2 id="PHPStrom快捷键，让你的效率事半功倍"><a href="#PHPStrom快捷键，让你的效率事半功倍" class="headerlink" title="PHPStrom快捷键，让你的效率事半功倍"></a>PHPStrom快捷键，让你的效率事半功倍</h2><pre><code class="php"><span class="number">1</span>、CTRL + D 复制当前行或复制选中内容 
<span class="number">2</span>、CTRL + Y 删除当前行或选中内容所涉及的行 
<span class="number">3</span>、CTRL + R 查找替换 
<span class="number">4</span>、ALT + W 选中单词 
<span class="number">5</span>、ALT + 上下箭头 向上向下函数间切换 
<span class="number">6</span>、CTRL + SHIFT + V 显示最近粘贴板中的内容，选择后内容插入到光标位置 
<span class="number">7</span>、CTRL + Q 显示说明文档 
<span class="number">8</span>、CTRL + B 跳转到声明处

<span class="number">9</span>、CTRL + N 类名查找 
<span class="number">10</span>、CTRL + SHIFT + N 文件名查找 
<span class="number">11</span>、CTRL + SHIFT + ALT + N 函数名查找

<span class="number">12</span>、ALT + SHIFT + C 快速回顾最近修改的项目 
<span class="number">13</span>、CTRL + SHIFT + I 查看变量初始化的值 
<span class="number">14</span>、CTRL + ALT + T 插入环绕代码 
<span class="number">15</span>、CTRL + ALT + F

sqlyog 
f12 对sql语句进行格式化 
Ctrl + f12 对选中的sql语句进行格式化 
shift+f12 对所有的sql语句进行格式化
</code></pre>
<blockquote>
<p>高亮<br>CTRL+F   选中的文字,高亮显示 上下跳到下一个或者上一个<br>F2  高亮错误或警告快速定位<br>SHIFT+F2  高亮错误或警告快速定位<br>CTRL+SHIFT+F7  高亮显示多个关键字. </p>
<p>本地历史VCS/SVN<br>Alt +反引号（’） 快速弹出VCS菜单<br>Ctrl + K         提交项目VCS<br>Ctrl + T         更新项目从VCS<br>Alt + Shift + C  查看最近发生的变化</p>
<p>复制快捷方式<br>F5   拷贝文件快捷方式<br>CTRL+C   复制<br>CTRL+V   粘贴<br>CTRL+D   复制行<br>CTRL+X   剪 切,删除行<br>CTRL+SHIFT+V  可以复制多个文本 </p>
<p>其他快捷方式<br>CTRL+Z        倒退(代码后悔)<br>CTRL+SHIFT+Z  向前<br>CTRL+H        显 示类结构图<br>Ctrl +F12      文件结构弹出<br>Ctrl+Shift+H  方法的层次结构<br>Ctrl+Alt+H    呼叫层次<br>CTRL+Q   显示代码注释<br>CTRL+W   选中代码，连续按会 有其他效果<br>Ctrl+Shift+W   减少当前选择到以前的状态<br>CTRL+B   转到声明，快速打开光标处的类或方法说明注释(CTRL + 鼠标单击 也可以)<br>CTRL+O   魔术方法<br>CTRL+/   注释//取消注释<br>CTRL+SHIFT+/  注释/<em>…</em>/<br>CTRL+ []   光标移动到 {}[]开头或结尾位置<br>CTRL+SHIFT+[]    选中块代码，可以快速复制<br>ctrl + ‘-/+’: 可以折叠项目中的任何代码块,包括htm中的任意&gt; nodetype=3的元素，function,或对象直接量等等。它不是选中折叠，而是自动识别折叠。<br>ctrl + ‘.’: 折叠选中的代码的代码</p>
<p>其他快捷方式<br>CTRL+Z   倒退(代码后悔)<br>CTRL+SHIFT+Z  向前<br>CTRL+H   显 示类结构图<br>CTRL+Q   显示代码注释<br>CTRL+W   选中代码，连续按会 有其他效果<br>CTRL+B   快速打开光标处的类或方法<br>CTRL+O   魔术方法<br>CTRL+/   注释//<br>CTRL+SHIFT+/  注释/<em>…</em>/<br>ctrl+[]   匹配 {}[]<br>ctrl+shift+[]    选中块代码<br>ctrl + ‘-/+’: 可以折叠项目中的任何代码块,包括htm中的任意nodetype=3的元素，function,或对象直接量等等。它不是选中折叠，而是自动识别折叠。<br>ctrl + ‘.’: 折叠选中的代码的代码</p>
<p>调试<br>F8步过<br>F7步入<br>Shift + F7智能进入<br>Shift + F8步骤<br>ALT + F9运行到光标<br>Alt + F8计算表达式<br>F9恢复程序<br>Ctrl + F8切换断点<br>Ctrl + Shift + F8查看断点</p>
</blockquote>
<h2 id="PHPStrom中链接SVN"><a href="#PHPStrom中链接SVN" class="headerlink" title="PHPStrom中链接SVN"></a>PHPStrom中链接SVN</h2><blockquote>
<p>VCS是版本控制系统，svn是版本控制器<br> 打开<code>PhpStorm</code>，找到工具<code>VCS—&gt;Checkout from Version Control—&gt;Subversion</code> ，点击进入。<br><img src="http://images2015.cnblogs.com/blog/1091655/201701/1091655-20170120221933562-175029383.png" alt="步骤一"></p>
<p>输入svn地址。<br>　　 点击页面中的“+”号，然后输入svn地址（就是上面svn建库的时候会产生一个URL地址）。点击OK。<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203163406808-729340847.png" alt="步骤二"></p>
<p>选择导出文件，进行项目的检出</p>
</blockquote>
<p>　　这时候我们就能浏览到svn服务器上文件列表。选择我们要导出的文件，点击Checkout，进行文件的检出（导出）。<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203164534854-1665717838.png" alt="步骤三"></p>
<blockquote>
<p>报错处理<br>　　点击checkout，如果出现  Executable is not specified(未指定可执行项目) 提示；或者出现Connot run program “svn”(……): CreateProcess 　　　error=2,……   的报错，我们点击<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203185849276-1282468612.png" alt="步骤四"><br>点击设置，之后确定即可。<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203221120104-750052808.png" alt="步骤五"></p>
<p>本地检出<br>   选择一个本地的目标目录，点击OK。选择需要更新到本地的版本，点击OK。<br>！<a href="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203225526136-1457469298.png" target="_blank" rel="external">步骤六</a></p>
<p>选择svn服务器版本，点击OK<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203172958198-262505511.png" alt="步骤七"></p>
<p>　然后会弹出账号密码输入框<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203173242417-285099560.png" alt="步骤八"></p>
<p>进行项目检出<br>　　输入用户名和密码后，点击确认,进行项目检出。第一次更新可能时间会长一点。耐心等待。完成后会询问你是否打开该项目，点击确定，进入项目。到此为止项目已经更新到本地。<br><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203173400792-1524311023.png" alt="步骤九"></p>
<p>查看VCS目录<br>！<a href="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203230315808-2040592402.png" target="_blank" rel="external">步骤十</a><br>接下来是一张汉化的图片，与上图内容一致，基本上英文都有翻译</p>
</blockquote>
<p><img src="http://images2015.cnblogs.com/blog/1091655/201702/1091655-20170203173716136-2105706815.png" alt="步骤十一"></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="http://www.cnblogs.com/jingmin/p/6329556.html" target="_blank" rel="external">phpstorm中svn的使用</a><br><a href="http://blog.csdn.net/u010918847/article/details/52441266" target="_blank" rel="external">phpstorm 中使用database工具</a><br><a href="https://www.zhihu.com/question/53152420/answer/152805058" target="_blank" rel="external">phpstorm有哪些好用的插件?</a><br><a href="http://blog.csdn.net/Rodgexue/article/details/45173493" target="_blank" rel="external">phpStorm使用技巧小结</a></p>
]]></content>
      
        <categories>
            
            <category> software </category>
            
        </categories>
        
        
        <tags>
            
            <tag> phpstorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP大小写敏感规则]]></title>
      <url>/2017/05/14/PHP%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="PHP编码规范"><a href="#PHP编码规范" class="headerlink" title="PHP编码规范"></a><span style="color:blue;">PHP编码规范</span></h1><h2 id="1-文件格式"><a href="#1-文件格式" class="headerlink" title="1.文件格式"></a><span style="color:blue;">1.文件格式</span></h2><ul>
<li>对于只含有 php 代码的文件，我们将在文件结尾处忽略掉 “?&gt;” 。这是为了防止多余的空格或者其它字符影响到代码。</li>
<li>缩进应该能够反映出代码的逻辑结果，尽量使用四个空格，禁止使用制表符TAB，因为这样能够保证有跨客户端编程器软件的灵活性。</li>
<li>变量赋值必须保持相等间距和排列。</li>
<li>每行代码长度应控制在80个字符以内，最长不超过120个字符。因为 linux 读入文件一般以80列为单位，就是说如果一行代码超过80个字符，那么系统将为此付出额外操作指令。这个虽然看起来是小问题，但是对于追求完美的程序员来说也是值得注意并遵守的规范。</li>
<li>每行结尾不允许有多余的空格。</li>
</ul>
<h2 id="2-命名约定"><a href="#2-命名约定" class="headerlink" title="2.命名约定"></a><span style="color:blue;">2.命名约定</span></h2><ul>
<li>类文件都是以<code>“.class.php“</code>为后缀，且类文件名只允许字母，使用驼峰法命名，并且首字母大写，例如：<code>DbMysql.class.php</code> 。</li>
<li>配置和函数等其他类库文件之外的文件一般是分别以<code>“.inc.php“</code>和<code>”.php“</code>为后缀，且文件名命名使用小写字母和下划线的方式，多个单词之间以下 划线分隔，例如<code>config.inc.php</code> ， <code>common.php</code>，<code>install_function.php</code> 。</li>
<li>确保文件的命名和调用大小写一致，是由于在类Unix系统上面，对大小写是敏感的。</li>
<li>类名和文件名一致（包括上面说的大小写一致），且类名只允许字母，例如 <code>UserAction</code>类的文件命名是<code>UserAction.class.php</code>， </li>
<li>控制器类以<code>Action</code>为后缀，例如 <code>UserAction</code>、<code>InfoAction</code> ，模型类以<code>Model</code>为后缀，例如<code>UserModel</code>、<code>InfoModel</code> ，其他类也分别以相应分类为后缀，例如<code>Service 、Widget</code>。</li>
<li>方法名只允许由字母组成，下划线是不允许的，首字母要小写，其后每个单词首字母要大写，即所谓的<strong> “驼峰法命名” </strong>规则，且越详细越好，应该能够描述清楚该方法的功能，例如<code>switchModel</code>、<code>findPage</code>。</li>
<li>属性的命名只允许由字母组成，下划线是不允许的，首字母要小写，其后每个单词首字母要大写，即所谓的 “驼峰法命名” 规则，例如<code>tablePrefix、tableName</code> 。</li>
<li>对于对象成员的访问，我们必须始终使用 <code>“get”</code>和 <code>“set”</code> 方法。</li>
<li>当类成员方法被声明为 <code>private</code> 时，必须分别以双下划线 “_<em>“为开头；被声明为 <code>protected</code> 时，必须分别以单下划线 “</em>“ 为开头；一般情况下的方法不含下划线。</li>
<li>如果我们需要把一些经常使用的方法定义为全局函数，那么应该把它们以静态 (static) 的形式定义在类中。</li>
<li>被声明为 private的类成员属性必须由双下划线 “_<em>“ 作为开头；被声明为 protected 的类成员属性必须由下划线 “</em>“ 作为开头；而声明为 public 的成员属性则在任何时候都不允许含有下划线。</li>
<li>函数的命名使用小写字母和下划线的方式，且越详细越好，应该能够描述清楚该函数的功能，例如 get_client_ip 。</li>
<li>当方法或函数参数不一定需要被赋值的时候，用 “null” 来代替 “false” 作为函数参数的默认值，除非该参数是 boolean 值。</li>
<li>变量只允许由小写字母和下划线组成，且建议用描述性的变量的命名，越详细越好，以至于像 $i 或 $n 等等都是不鼓励使用的。</li>
<li>类中的常量 constant 和全局范围内常量define，只能由大写字母和下划线组成，各个单词之间以下划线分割。</li>
<li>boolean 值和 null 值都采用小写。</li>
</ul>
<h1 id="php大小敏感规则"><a href="#php大小敏感规则" class="headerlink" title="php大小敏感规则"></a><span style="color:blue;">php大小敏感规则</span></h1><p>PHP对大小写敏感问题的处理比较混乱，写代码偶尔会出现问题。推荐大家始终坚持“<strong>大小写敏感</strong>”，遵循统一的代码规范。</p>
<h2 id="1-变量名区分大小写"><a href="#1-变量名区分大小写" class="headerlink" title="1.变量名区分大小写"></a><span style="color:blue;">1.变量名区分大小写</span></h2><p>所有变量均区分大小写，包括普通变量以及<code>$_GET,$_POST, $_REQUEST, $_COOKIE, $_SESSION, $GLOBALS, $_SERVER, $_FILES, $_ENV</code>等；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$abc = <span class="string">'hello world'</span>;</div><div class="line"><span class="keyword">echo</span> $abc;	<span class="comment">//输出hello world；</span></div><div class="line"><span class="keyword">echo</span> $ABC;	<span class="comment">//Notice: Undefined variable: ABC</span></div><div class="line"><span class="keyword">echo</span> $aBc;	<span class="comment">//Notice: Undefined variable</span></div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## &lt;span style="color:blue;"&gt;2.常量名默认区分大小写&lt;/span&gt;</span></div><div class="line">通常都写为大写。</div><div class="line"></div><div class="line">```php</div><div class="line"></div><div class="line">define(<span class="string">"ABCD"</span>,<span class="string">"HelloWorld"</span>);</div><div class="line"><span class="keyword">echo</span> ABCD;	<span class="comment">//输出HelloWorld</span></div><div class="line"><span class="keyword">echo</span> abcd;	<span class="comment">//Notice: Use of undefined constant abcd</span></div></pre></td></tr></table></figure></p>
<h2 id="3-php-ini配置项指令区分大小写"><a href="#3-php-ini配置项指令区分大小写" class="headerlink" title="3.php.ini配置项指令区分大小写"></a><span style="color:blue;">3.php.ini配置项指令区分大小写</span></h2><ul>
<li>如<code>file_uploads = 1</code>不能写成<code>File_Uploads = 1</code>;</li>
</ul>
<h1 id="大小写不敏感"><a href="#大小写不敏感" class="headerlink" title="大小写不敏感"></a><span style="color:blue;">大小写不敏感</span></h1><h2 id="1-函数名、方法名、类名不区分大小写"><a href="#1-函数名、方法名、类名不区分大小写" class="headerlink" title="1.函数名、方法名、类名不区分大小写"></a><span style="color:blue;">1.函数名、方法名、类名不区分大小写</span></h2><ul>
<li>推荐<strong>使用与定义时相同的“名字”</strong>；</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">&#125;</div><div class="line">show(); <span class="comment">//hello world;(推荐写法)</span></div><div class="line">SHOW(); <span class="comment">//hello world;</span></div></pre></td></tr></table></figure>
<h2 id="2-魔术常量不区分大小写"><a href="#2-魔术常量不区分大小写" class="headerlink" title="2.魔术常量不区分大小写"></a><span style="color:blue;">2.魔术常量不区分大小写</span></h2><ul>
<li>包括：<code>__LINE__、__FILE__、__DIR__、__FUNCTION__、__CLASS__、__METHOD__、 __NAMESPACE__</code>。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">//输出5</span></div><div class="line"><span class="keyword">echo</span> <span class="keyword">__line__</span>;  <span class="comment">//输出6</span></div></pre></td></tr></table></figure>
<h2 id="3-NULL-TRUE-FALSE不区大小写"><a href="#3-NULL-TRUE-FALSE不区大小写" class="headerlink" title="3.NULL,TRUE,FALSE不区大小写"></a><span style="color:blue;">3.NULL,TRUE,FALSE不区大小写</span></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$a = <span class="keyword">null</span>;</div><div class="line">$b = <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">$c = <span class="keyword">TRUE</span>;</div><div class="line">$d = ture;</div><div class="line"></div><div class="line">$e = <span class="keyword">false</span>;</div><div class="line">$f = <span class="keyword">FALSE</span>;</div><div class="line"></div><div class="line">var_dump($a == $b);		<span class="comment">//bool(true) </span></div><div class="line">var_dump($c == $d);		<span class="comment">//bool(true) </span></div><div class="line">var_dump($e == $f);		<span class="comment">//bool(true)</span></div></pre></td></tr></table></figure>
<h2 id="4-类型强制转换不区分大小写"><a href="#4-类型强制转换不区分大小写" class="headerlink" title="4.类型强制转换不区分大小写"></a><span style="color:blue;">4.类型强制转换不区分大小写</span></h2><ul>
<li>(bool)，(boolean) – 转换成布尔型 </li>
<li>(float)，(double)，(real) – 转换成浮点型 </li>
<li>(string) – 转换成字符串 </li>
<li>(array) – 转换成数组 </li>
<li>(object) – 转换成对象 <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">$a=<span class="number">1</span>; </div><div class="line">var_dump($a); <span class="comment">//输出 int 1 </span></div><div class="line">$b=(STRING)$a; </div><div class="line">var_dump($b); <span class="comment">//输出string '1' (length=1) </span></div><div class="line">$c=(string)$a; </div><div class="line">var_dump($c); <span class="comment">//输出string '1' (length=1)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="http://blog.csdn.net/songkexin/article/details/6757779" target="_blank" rel="external">songkexin</a><br><a href="http://www.cnblogs.com/lida/archive/2011/05/24/2055131.html" target="_blank" rel="external">笨鸟先飞</a></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习知识体系路线图]]></title>
      <url>/2017/05/13/%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p><img src="/images/php知识结构图.jpg" alt="&quot;php知识结构图&quot;"><br><img src="/images/mysql知识结构图.jpg" alt="&quot;mysql知识结构图&quot;"><br><img src="/images/jquery知识结构图.jpg" alt="&quot;jquery知识结构图&quot;"><br><img src="/images/wechat知识结构图.jpg" alt="&quot;wechat知识结构图&quot;"><br><img src="/images/mongodb知识结构图.jpg" alt="&quot;mongodb知识结构图&quot;"><br><img src="/images/git知识结构图.jpg" alt="&quot;git知识结构图&quot;"><br><img src="/images/html5知识结构图.jpg" alt="&quot;html5知识结构图&quot;"><br><img src="/images/architecture知识结构图.jpg" alt="&quot;architecture知识结构图&quot;"><br><img src="/images/computernetworks知识结构图.jpg" alt="&quot;computernetworks知识结构图&quot;"><br><img src="/images/datastructure知识结构图.jpg" alt="&quot;datastructure知识结构图&quot;"> </p>
<hr>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="http://www.csdn.net/" target="_blank" rel="external">CSDN-不至于代码</a></p>
]]></content>
      
        <categories>
            
            <category> study </category>
            
        </categories>
        
        
        <tags>
            
            <tag> study </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown实用的语法]]></title>
      <url>/2017/05/12/Markdown%E5%AE%9E%E7%94%A8%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h3><p>短代码区 `&lt;?php echo hello world。?&gt;<br>长代码区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    //世界是如此的美丽，你好世界</div><div class="line">    echo helloworld;</div><div class="line">?&gt;</div><div class="line">``` </div><div class="line">### 1.1 php代码区</div><div class="line">```php</div><div class="line">&lt;?php</div><div class="line">	</div><div class="line">	// 求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数</div><div class="line">	echo  (mktime(0,0,0,3,6,2007) -  mktime(0,0,0,2,5,2007) )/(24*3600) ,&apos;&lt;br /&gt;&apos;; //29</div><div class="line">	echo ( strtotime(&apos;3/6/2007&apos;) - strtotime(&apos;2/5/2007&apos;) ) /(24*3600); //29</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>右边是一个链接，格式为<code>[备注](连接)</code>：<a href="//www.baidu.com">这是一个链接</a>。<br>[你好世界][1]&lt;–左边字体变色，格式为：<code>[文字][1|2|3]</code>。<br>下边是一个图片，格式为<code>![备注](链接地址)</code>：<br><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="你好世界"></p>
<h3 id="2-图标"><a href="#2-图标" class="headerlink" title="2.图标"></a>2.图标</h3><p><i class="icon-share"></i>转发，格式为：<br><i class="icon-file"></i>新建<br><i class="icon-trash"></i>删除<br><i class="icon-cloud"></i>云<br><i class="icon-reorder"></i>列表<br><i class="icon-pencil"></i>铅笔<br><i class="icon-fullscreen"></i>全屏<br><i class="icon-list"></i>列表<br><i class="icon-desktop"></i>电脑</p>
<ul>
<li>[ ] 空白框</li>
<li>[x] 对勾</li>
</ul>
<table>
<thead>
<tr>
<th>表格</th>
<th style="text-align:right">表格</th>
<th style="text-align:center">表格</th>
<th style="text-align:right">表格</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认左</td>
<td style="text-align:right">靠右</td>
<td style="text-align:center">中间</td>
<td style="text-align:right">右边</td>
</tr>
</tbody>
</table>
<h3 id="hexo插入图片"><a href="#hexo插入图片" class="headerlink" title="hexo插入图片"></a>hexo插入图片</h3><ul>
<li>插入外部链接图片<br>  <img src="“图片地址”" alt="“图片描述”">  </li>
<li>添加本地图片(在\hexo\source目录下新建images文件夹)<br>  <img src="/images/你的图片名字.JPG" alt="“图片描述”">  </li>
<li><p>插入音乐(网易云音乐，找到喜欢的歌曲，点击分享按钮，把里面的代码复制下来，直接粘贴到博文中即可)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86   </div><div class="line">    src=&quot;http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66&quot;&gt;  </div><div class="line">&lt;/iframe&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>插入视频</p>
<pre><code>Idina Menze和Caleb Hyles激情对唱Let It Go：  
&lt;iframe   
  height=498 width=510   
  src=&quot;http://player.youku.com/embed/XNjcyMDU4Njg0&quot;   
  frameborder=0 allowfullscreen&gt;  
&lt;/iframe&gt;
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markDown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之工厂模式]]></title>
      <url>/2017/05/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><p>工厂模式通俗来说是指，为一些有着相同结构的类创建一个类族，并且为这个族群提供唯一一个入口类。</p>
<hr>
<h2 id="工厂模式的含义？"><a href="#工厂模式的含义？" class="headerlink" title="工厂模式的含义？"></a>工厂模式的含义？</h2><p>工厂模式的含义就是：设计一个类（此时这个类可以叫作“工厂类”），该类的作用就是帮助其他的类“生产”对象，也就是说，只要传递给这个“工厂”一个类名，就可以得到一个相应的对象！</p>
<hr>
<h2 id="工厂模式实例01"><a href="#工厂模式实例01" class="headerlink" title="工厂模式实例01"></a>工厂模式实例01</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Factory&#123;</div><div class="line">	public static function getInstance($class_name)&#123;</div><div class="line">		if (file_exists(&apos;./&apos;.$class_name.&apos;.class.php&apos;)) &#123;</div><div class="line">			include &apos;.&apos;.$class_name.&apos;.class.php&apos;;</div><div class="line">			return new $class_name;	//可变对象</div><div class="line">		&#125;else&#123;</div><div class="line">			die(&quot;系统错误，没有找到相关的类！&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//利用工厂类得到对象</div><div class="line">$obj = Factory::getInstance(&apos;variableObj&apos;);</div></pre></td></tr></table></figure>
<h2 id="工厂模式实例02"><a href="#工厂模式实例02" class="headerlink" title="工厂模式实例02"></a>工厂模式实例02</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//利用工厂方法，生成单例对象</div><div class="line">class ObjectFactory&#123;</div><div class="line">	//这里的单例，实现的方式不是“三私一共”</div><div class="line">	private static $instance;</div><div class="line">	public static function getInstance($class_name)&#123;</div><div class="line">		if (file_exists(&apos;./&apos;.$class_name.&apos;.class.php&apos;)) &#123;</div><div class="line">			include_once &apos;./&apos;.$class_name.&apos;.class.php&apos;;</div><div class="line">			if (!self::$instance instanceof $class_name) &#123;</div><div class="line">				self::$instance = new $class_name;</div><div class="line">			&#125;</div><div class="line">			return self::instance;</div><div class="line">		&#125;else&#123;</div><div class="line">			die(&quot;系统错误，没有找到相关的类！&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$obj = ObjectFactory::getInstance(&apos;obj&apos;);</div></pre></td></tr></table></figure>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://blog.csdn.net/phenixsoul/article/details/8492696" target="_blank" rel="external">寻源之理</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之单例模式]]></title>
      <url>/2017/05/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h2><p>单例模式是一种常见的设计模式，单例就是单一的实例，在实际的应用中，我们发现，存在一些类只需要实例化出来一个对象，就是可以完成所有的操作和功能。计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。</p>
<h2 id="单例模式的特点？"><a href="#单例模式的特点？" class="headerlink" title="单例模式的特点？"></a>单例模式的特点？</h2><ul>
<li>只能有一个实例；</li>
<li>必须自行创建这个实例；</li>
<li>必须给其他对象提供这一实例；<h2 id="单例模式的好处？"><a href="#单例模式的好处？" class="headerlink" title="单例模式的好处？"></a>单例模式的好处？</h2></li>
<li>改进系统的设计；</li>
<li>对全局变量是一种改建；</li>
<li>使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。<h2 id="单例实例"><a href="#单例实例" class="headerlink" title="单例实例"></a>单例实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//典型的做法：三私一公</div><div class="line">class DB&#123;</div><div class="line">	//私有化静态变量保存全局实例</div><div class="line">	private static $instance=null;</div><div class="line">	//私有化构造方法，防止外界实例化对象</div><div class="line">	private function __construct()&#123;&#125;</div><div class="line">	//公有化静态方法，单例访问入口</div><div class="line">	public static function getInstance()&#123;</div><div class="line">		//判断当前对象是否已经存在</div><div class="line">		if (!self::$instance instanceof self) &#123;</div><div class="line">			self::$instance=new self();</div><div class="line">		&#125;</div><div class="line">		return $instance;</div><div class="line">	&#125;</div><div class="line">	//私有化clone函数，防止外部克隆对象</div><div class="line">	private function __clone()&#123;&#125;</div><div class="line">&#125;</div><div class="line">//实例化对象</div><div class="line">$db1 = DB::getInstance();</div><div class="line">$db2 = DB::getInstance();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://www.cnblogs.com/yangjinjin/archive/2013/01/31/2887492.html" target="_blank" rel="external">最美的痕迹</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>/2017/04/28/http%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h2><p>HTTP 是基于 TCP/IP 协议的应用层协议。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p>
<h2 id="HTTP的缺点？"><a href="#HTTP的缺点？" class="headerlink" title="HTTP的缺点？"></a>HTTP的缺点？</h2><p>缺点：</p>
<ul>
<li>每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</li>
<li>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（slow start）。所以，HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">五大类：</div><div class="line"><span class="number">100</span><span class="number">-199</span> 用于指定客户端应相应的某些动作。 </div><div class="line"><span class="number">200</span><span class="number">-299</span> 用于表示请求成功。 </div><div class="line"><span class="number">300</span><span class="number">-399</span> 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。 </div><div class="line"><span class="number">400</span><span class="number">-499</span> 用于指出客户端的错误。 </div><div class="line"><span class="number">500</span><span class="number">-599</span> 用于支持服务器错误。</div><div class="line">常见状态码：</div><div class="line"><span class="number">200</span>（成功）：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页</div><div class="line"><span class="number">201</span>（已创建）：请求成功并且服务器创建了新的资源</div><div class="line"><span class="number">202</span>（已接受）：服务器已接受请求，但尚未处理</div><div class="line"><span class="number">203</span>（非授权信息）：服务器已成功处理了请求，但返回的信息可能来自另一来源</div><div class="line"><span class="number">204</span>（无内容）：服务器成功处理了请求，但没有返回任何内容</div><div class="line"><span class="number">205</span>（重置内容）：服务器成功处理了请求，但没有返回任何内容</div><div class="line"><span class="number">206</span> （部分内容）：服务器成功处理了部分GET 请求</div><div class="line"><span class="number">404</span>（未找到）：服务器找不到请求的网页</div><div class="line"><span class="number">500</span>（服务器内部错误）：服务器遇到错误，无法完成请求</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#友情链接</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="external">阮一峰的网络日志</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP常用字符串函数]]></title>
      <url>/2016/05/09/PHP%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>字符串输出<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span>()：输出一个或多个字符串</div><div class="line"><span class="keyword">print</span>()：输出一个字符串</div><div class="line">printf()：输出格式化字符串</div></pre></td></tr></table></figure></p>
<p>字符串去除<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">trim()：去除字符串 首尾 空白等特殊符号或指定字符序列</div><div class="line">ltrim()：去除字符串 首 空白等特殊符号或指定字符序列</div><div class="line">rtrim()：去除字符串 尾 空白等特殊符号或指定字符序列</div><div class="line">chop()：同 rtrim()</div></pre></td></tr></table></figure></p>
<p>字符串连接<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">implode()：使用字符将数组的内容组合成一个字符串</div><div class="line">join()：同 implode()</div></pre></td></tr></table></figure></p>
<p>字符串分割<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explode()：使用一个字符串分割另一个字符串，将字符串分割到数组中</div></pre></td></tr></table></figure></p>
<p>字符串获取<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    substr()：从字符串中获取其中的一部分</div><div class="line">    strstr()：查找字符串在另一个字符串中第一次出现的位置，并返回从该位置到字符串结尾的所有字符</div><div class="line">    subchr()：同 strstr()</div><div class="line">    strrchr()：查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符</div><div class="line">``` </div><div class="line">字符串替换</div><div class="line">```php</div><div class="line">    substr_replace()：把字符串的一部分替换为另一个字符串</div><div class="line">    str_replace()：使用一个字符串替换字符串中的另一些字符</div></pre></td></tr></table></figure></p>
<p>字符串计算<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    strlen()：取得字符串的长度</div><div class="line">    strpos()：定位字符串第一次出现的位置</div><div class="line">    strrpos()：定位字符串最后一次出现的位置</div><div class="line">``` </div><div class="line">字符串 XHTML 格式化显示</div><div class="line">```php</div><div class="line">    nl2br()：将换行符 n 转换成 XHTML 换行符</div><div class="line">    htmlspecialchars()：把一些特殊字符转换为 HTML 实体</div><div class="line">    htmlspecialchars_decode()：把一些 HTML 实体转换为特殊字符，htmlspecialchars() 的反函数</div></pre></td></tr></table></figure></p>
<p>字符串存储（转义）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">addslashes()：对特殊字符加上转义字符。</div><div class="line">stripslashes()：addslashes() 的反函数。</div></pre></td></tr></table></figure></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul>
<li><a href="http://www.blogdaren.com/" target="_blank" rel="external">博客达人</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2015/05/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
